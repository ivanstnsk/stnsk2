{"version":3,"sources":["screens/Contacts/laptop/components/ContactButton/ContactButton.tsx","screens/Contacts/laptop/components/SocialButton/SocialButton.tsx","screens/Contacts/laptop/components/ContactButton/styles.ts","screens/Contacts/laptop/components/SocialButton/styles.ts","screens/Contacts/laptop/components/ContactButton/index.ts","screens/Contacts/laptop/components/SocialButton/index.ts","screens/Contacts/laptop/components/index.ts"],"names":["ContactButton","type","text","onClick","useState","active","setActive","classes","useStyles","iconColor","getActiveHandler","useCallback","nextActive","className","button","onMouseEnter","onMouseLeave","width","height","color","SocialButton","useMouseHover","containerRef","hovered","ref","container","icon","styles","colors","title","typography","backgroundColor","display","flexDirection","justifyContent","alignItems","border","outline","cursor","transition","marginBottom","transform","primary","greenMedium","fontSize","fontWeight","lineHeight","marginLeft","fontFamily","useTStyles","marginTop","props"],"mappings":"oNAcaA,EAA8C,SAAC,GAIrD,IAHLC,EAGI,EAHJA,KACAC,EAEI,EAFJA,KACAC,EACI,EADJA,QACI,EACwBC,oBAAS,GADjC,mBACGC,EADH,KACWC,EADX,KAEEC,EAAUC,sBACVC,EAAYJ,EACd,UACA,wBAEEK,EAAmBC,uBAAY,SAACC,GAAD,OAAyB,WAC5DN,EAAUM,MACT,CAACN,IAEJ,OACE,4BACEO,UAAWN,EAAQO,OACnBX,QAASA,EACTY,aAAcL,GAAiB,GAC/BM,aAAcN,GAAiB,IAE/B,kBAAC,IAAD,CACET,KAAMA,EACNgB,MAAO,GACPC,OAAQ,GACRC,MAAOV,IAET,0BAAMI,UAAWN,EAAQL,MACtBA,M,wIC7BIkB,EAA4C,SAAC,GAGnD,IAFLnB,EAEI,EAFJA,KACAE,EACI,EADJA,QACI,EAC4BkB,cAD5B,mBACGC,EADH,KACiBC,EADjB,KAEEhB,EAAUC,oBAAU,CAAEe,YACtBd,EAAYc,EACd,UACA,wBAEJ,OACE,yBACEC,IAAKF,EACLT,UAAWN,EAAQkB,UACnBtB,QAASA,GAET,kBAAC,IAAD,CACEU,UAAWN,EAAQmB,KACnBzB,KAAMA,EACNgB,MAAO,GACPC,OAAQ,GACRC,MAAOV,IAET,kBAAC,IAAD,CACEI,UAAWN,EAAQO,OACnBZ,KAAK,OACLe,MAAO,IACPd,QAASA,O,iCCxCjB,4DAGMwB,EAAoB,SAAC,GAKpB,IAAD,IAJJC,OACgBC,EAGZ,EAHFC,WAAcD,MAIhB,MAAO,CACLf,OAAQ,CACNiB,gBAAiB,cACjBC,QAAS,OACTC,cAAe,MACfC,eAAgB,aAChBC,WAAY,SACZC,OAAQ,OACRC,QAAS,OACTC,OAAQ,UACRC,WAAY,gBACZC,aAAc,GAEd,UAAW,CACTC,UAAW,4BACXF,WAAY,iBAEd,gBAAiB,CACfpB,MAnBF,EAFFuB,QAAWC,cAwBXzC,KAAM,CACJ0C,SAAU,GACVC,WAAY,SACZC,WAAY,OACZ3B,MAAOU,EACPkB,WAAY,GACZC,WAAY,2BAKLxC,EAAY,kBAAsByC,YAAWtB,K,iCCzC1D,4DAOMA,EAAoB,WACxB,MAAO,CACLF,UAAW,CACTO,QAAS,OACTC,cAAe,SACfC,eAAgB,aAChBC,WAAY,SACZI,WAAY,iBAEdzB,OAAQ,CACNoC,UAAW,IAEbxB,KAAM,kBAA+B,CACnCe,UADI,EAAGlB,QAEH,0BACA,sBACJgB,WAAY,oBAKL/B,EAAY,SAAC2C,GAAD,OAAwCF,YAAWtB,EAAQwB,K,gCC7BpF,iF,gCCAA,+E,gCCAA","file":"static/js/11.328f8253.chunk.js","sourcesContent":["import React, { useState, useCallback } from 'react';\n\nimport { SvgIcon } from 'components';\n\nimport { TContactButtonTypes } from './types';\nimport { useStyles } from './styles';\n\n\ninterface ContactButtonProps {\n  type: TContactButtonTypes;\n  text: string;\n  onClick?: () => void;\n}\n\nexport const ContactButton: React.FC<ContactButtonProps> = ({\n  type,\n  text,\n  onClick,\n}) => {\n  const [active, setActive] = useState(false);\n  const classes = useStyles();\n  const iconColor = active\n    ? '#81AF65'\n    : 'rgba(255,255,255,0.4)';\n\n  const getActiveHandler = useCallback((nextActive: boolean) => () => {\n    setActive(nextActive);\n  }, [setActive]);\n\n  return (\n    <button\n      className={classes.button}\n      onClick={onClick}\n      onMouseEnter={getActiveHandler(true)}\n      onMouseLeave={getActiveHandler(false)}\n    >\n      <SvgIcon\n        type={type}\n        width={60}\n        height={60}\n        color={iconColor}\n      />\n      <span className={classes.text}>\n        {text}\n      </span>\n    </button>\n  );\n};\n","import React from 'react';\n\nimport { SvgIcon, Button } from 'components';\nimport { useMouseHover } from 'hooks';\n\nimport { TContactButtonTypes } from './types';\nimport { useStyles } from './styles';\n\n\ninterface SocialButtonProps {\n  type: TContactButtonTypes;\n  onClick?: () => void;\n}\n\nexport const SocialButton: React.FC<SocialButtonProps> = ({\n  type,\n  onClick,\n}) => {\n  const [containerRef, hovered] = useMouseHover<HTMLDivElement>();\n  const classes = useStyles({ hovered });\n  const iconColor = hovered\n    ? '#81AF65'\n    : 'rgba(255,255,255,0.4)';\n\n  return (\n    <div\n      ref={containerRef}\n      className={classes.container}\n      onClick={onClick}\n    >\n      <SvgIcon\n        className={classes.icon}\n        type={type}\n        width={60}\n        height={60}\n        color={iconColor}\n      />\n      <Button\n        className={classes.button}\n        text=\"Open\"\n        width={110}\n        onClick={onClick}\n      />\n    </div>\n  );\n};\n","import { AppStyles, AppInnerStyles } from 'types/style';\nimport { useTStyles } from 'hooks';\n\n\nconst styles: AppStyles = ({\n  colors: {\n    typography: { title },\n    primary: { greenMedium },\n  },\n}) => {\n  return {\n    button: {\n      backgroundColor: 'transparent',\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'flex-start',\n      alignItems: 'center',\n      border: 'none',\n      outline: 'none',\n      cursor: 'pointer',\n      transition: 'all 0.4s ease',\n      marginBottom: 40,\n\n      '&:hover': {\n        transform: 'scaleX(1.05) scaleY(1.05)',\n        transition: 'all 0.4s ease',\n      },\n      '&:hover $text': {\n        color: greenMedium,\n      },\n    },\n    text: {\n      fontSize: 18,\n      fontWeight: 'normal',\n      lineHeight: '22px',\n      color: title,\n      marginLeft: 30,\n      fontFamily: 'Quicksand, sans-serif',\n    },\n  };\n};\n\nexport const useStyles = (): AppInnerStyles => useTStyles(styles);\n","import { AppStyles, AppInnerStyles } from 'types/style';\nimport { useTStyles } from 'hooks';\n\n\ntype TStyleProps = {\n  hovered: boolean;\n};\n\nconst styles: AppStyles = () => {\n  return {\n    container: {\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'flex-start',\n      alignItems: 'center',\n      transition: 'all 0.4s ease',\n    },\n    button: {\n      marginTop: 30,\n    },\n    icon: ({ hovered }: TStyleProps) => ({\n      transform: hovered\n        ? 'scaleX(1.1) scaleY(1.1)'\n        : 'scaleX(1) scaleY(1)',\n      transition: 'all 0.4s ease',\n    }),\n  };\n};\n\nexport const useStyles = (props: TStyleProps): AppInnerStyles => useTStyles(styles, props);\n","export { ContactButton } from './ContactButton';\n","export { SocialButton } from './SocialButton';\n","export { ContactButton } from './ContactButton';\nexport { SocialButton } from './SocialButton';\n"],"sourceRoot":""}