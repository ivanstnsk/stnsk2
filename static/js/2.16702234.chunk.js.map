{"version":3,"sources":["screens/Projects/laptop/screens/Project/redux/selectors.ts","screens/Projects/laptop/screens/Project/Project.tsx","screens/Projects/laptop/screens/Project/styles.ts","screens/Projects/laptop/screens/Project/components/Header/index.ts","screens/Projects/laptop/screens/Project/components/EmptyHeader/index.ts","screens/Projects/laptop/screens/Project/redux/index.ts","screens/Projects/laptop/screens/Project/components/index.ts","screens/Projects/laptop/screens/Project/index.ts","screens/Projects/laptop/screens/index.ts","screens/Projects/laptop/screens/Project/components/Header/Header.tsx","screens/Projects/laptop/screens/Project/components/EmptyHeader/EmptyHeader.tsx","screens/Projects/laptop/screens/Project/redux/useState.ts","screens/Projects/laptop/screens/Project/components/Header/styles.ts","screens/Projects/laptop/screens/Project/components/EmptyHeader/styles.ts"],"names":["selectProjects","state","projects","selectProject","projectId","createSelector","find","id","SCROLL_RANGES","compact","Infinity","Project","offsetSize","lastProject","useContentSize","headerSize","onScrollY","useParams","data","useState","classes","useStyles","isVisible","in","timeout","unmountOnExit","transitionState","className","wrapper","title","subTitle","iconType","tags","team","dates","technologies","workResults","achievements","size","onScroll","lines","ContentComponent","from","to","rows","styles","colors","primary","bgContent","position","top","bottom","left","right","borderWidth","borderTopWidth","borderStyle","boxSizing","borderColor","underline","backgroundColor","display","flexDirection","justifyContent","alignItems","useTStyles","Header","history","useHistory","iconSize","handleCloseClick","useCallback","push","Routes","PROJECTS","container","innerContainer","type","color","width","height","photo","midContainer","titleContainer","map","tag","key","label","rightContainer","onClick","EmptyHeader","useSelector","greyUltralight","sizes","content","contentMaxWidth","maxWidth","offsetHorizontal","sidebarWidth","menu","paddingLeft","paddingRight","maxHeight","getWrapperStyles","transition","flex","marginLeft","fontSize","fontWeight","lineHeight","fontFamily","marginRight","opacity","marginTop","getSubtitleStyles","minHeight","minWidth","getPhotoStyles","iconsContainer","paddingTop","getRightContainerStyles","props"],"mappings":"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","file":"static/js/2.16702234.chunk.js","sourcesContent":["import { createSelector, Selector } from 'reselect';\n\nimport { TState, TProjectsState } from 'types/store';\nimport { TProjectData } from 'types/data';\n\n\nexport const selectProjects = (state: TState): TProjectsState => state.projects;\n\ntype TCreatedSelector = Selector<TState, TProjectData | undefined>;\n\nexport const selectProject = (projectId: string): TCreatedSelector => createSelector<\n  TState,\n  TProjectsState,\n  TProjectData | undefined\n>(\n  [selectProjects],\n  (projects) => projects.find(({ id }) => id === projectId),\n);\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Transition } from 'react-transition-group';\n\nimport {\n  ScrollContent,\n  ContentContainer,\n  TransitionInnerScreenWrapper,\n  SectionWithIcon,\n  RowTable,\n  DateRange,\n  NoPage,\n} from 'components';\nimport { TContentSize } from 'types/sizes';\nimport { useContentSize } from 'hooks';\n\nimport { useState } from './redux';\nimport { Header, EmptyHeader } from './components';\nimport { useStyles } from './styles';\n\n\ninterface ProjectProps {\n  offsetSize?: TContentSize;\n  lastProject?: string;\n}\n\nconst SCROLL_RANGES = {\n  compact: [\n    [40, Infinity],\n  ],\n};\n\nexport const Project: React.FC<ProjectProps> = ({\n  offsetSize,\n  lastProject,\n}) => {\n  const [headerSize, onScrollY] = useContentSize(SCROLL_RANGES);\n  const { projectId } = useParams();\n  const { data } = useState(projectId || lastProject);\n  const classes = useStyles();\n  const isVisible = !!projectId;\n\n  if (!data) {\n    return (\n      <Transition\n        in={isVisible}\n        timeout={300}\n        unmountOnExit\n      >\n        {(state) => (\n          <TransitionInnerScreenWrapper\n            transitionState={state}\n            offsetSize={offsetSize}\n          >\n            <div className={classes.wrapper}>\n              <EmptyHeader />\n              <NoPage />\n            </div>\n          </TransitionInnerScreenWrapper>\n        )}\n      </Transition>\n    );\n  }\n\n  const {\n    title,\n    subTitle,\n    iconType,\n    tags,\n    team,\n    dates,\n    technologies,\n    workResults,\n    achievements,\n  } = data;\n\n  return (\n    <Transition\n      in={isVisible}\n      timeout={300}\n      unmountOnExit\n    >\n      {(state) => (\n        <TransitionInnerScreenWrapper\n          transitionState={state}\n          offsetSize={offsetSize}\n        >\n          <div className={classes.wrapper}>\n            {!data ? (\n              <>\n                <EmptyHeader />\n                <NoPage />\n              </>\n            ) : (<>\n              <Header\n                size={headerSize}\n                title={title}\n                subTitle={subTitle}\n                tags={tags}\n                iconType={iconType}\n              />\n              <ScrollContent onScroll={onScrollY}>\n                <ContentContainer>\n                  <SectionWithIcon\n                    iconType=\"work-result\"\n                    title=\"Work results\"\n                    lines={workResults}\n                  />\n                  <SectionWithIcon\n                    iconType=\"achievements\"\n                    title=\"Achievements\"\n                    lines={achievements}\n                  />\n                  <SectionWithIcon\n                    iconType=\"schedule\"\n                    title=\"Project schedule\"\n                    ContentComponent={(\n                      <DateRange\n                        from={dates.from}\n                        to={dates.to}\n                      />\n                    )}\n                  />\n                  <SectionWithIcon\n                    iconType=\"team\"\n                    title=\"Team\"\n                    ContentComponent={(\n                      <RowTable rows={team} />\n                    )}\n                  />\n                  <SectionWithIcon\n                    iconType=\"tech\"\n                    title=\"Technologies\"\n                    lines={technologies}\n                  />\n                </ContentContainer>\n              </ScrollContent>\n            </>)}\n          </div>\n        </TransitionInnerScreenWrapper>\n      )}\n    </Transition>\n  );\n};\n","import { AppStyles, AppInnerStyles } from 'types/style';\nimport { useTStyles } from 'hooks';\n\n\nconst styles: AppStyles = ({\n  colors: { primary: { bgContent, underline } },\n}) => {\n  return {\n    wrapper: {\n      position: 'absolute',\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0,\n      borderWidth: 0,\n      borderTopWidth: 1,\n      borderStyle: 'solid',\n      boxSizing: 'border-box',\n      borderColor: underline,\n      backgroundColor: bgContent,\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'flex-start',\n      alignItems: 'stretch',\n    },\n  };\n};\n\nexport const useStyles = (): AppInnerStyles => useTStyles(styles);\n","export { Header } from './Header';\n","export { EmptyHeader } from './EmptyHeader';\n","export { useState } from './useState';\n","export { Header } from './Header';\nexport { EmptyHeader } from './EmptyHeader';\n","export { Project } from './Project';\n","export { Project } from './Project';\n","import React, { useCallback } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport { CategoryLabel, CloseButton, SvgProjectIcon } from 'components';\nimport { TSvgProjectIconType } from 'types/icons';\nimport { TContentSize } from 'types/sizes';\nimport { Routes } from 'types';\n\nimport { useStyles } from './styles';\n\n\ninterface HeaderProps {\n  size?: TContentSize;\n  title: string;\n  subTitle: string;\n  tags: string[];\n  iconType: TSvgProjectIconType;\n}\n\nexport const Header: React.FC<HeaderProps> = ({\n  size = 'normal',\n  title,\n  subTitle,\n  tags,\n  iconType,\n}) => {\n  const history = useHistory();\n  const classes = useStyles({ size });\n  const iconSize = size === 'normal' ? 160 : 60;\n\n  const handleCloseClick = useCallback(() => {\n    history.push(Routes.PROJECTS);\n  }, [history]);\n\n  return (\n    <div className={classes.wrapper}>\n      <div className={classes.container}>\n        <div className={classes.innerContainer}>\n          <SvgProjectIcon\n            type={iconType}\n            color=\"rgba(255,255,255,0.5)\"\n            width={iconSize}\n            height={iconSize}\n            className={classes.photo}\n          />\n          <div className={classes.midContainer}>\n            <div className={classes.titleContainer}>\n              <div className={classes.title}>{title}</div>\n              {tags.map((tag) => (\n                <CategoryLabel\n                  key={tag}\n                  type={tag}\n                  label={tag}\n                />\n              ))}\n            </div>\n            <div className={classes.subTitle}>{subTitle}</div>\n          </div>\n        </div>\n      </div>\n      <div className={classes.rightContainer}>\n        <CloseButton\n          onClick={handleCloseClick}\n        />\n      </div>\n    </div>\n  );\n};\n","import React, { useCallback } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport { CloseButton } from 'components';\nimport { Routes } from 'types';\n\nimport { useStyles } from './styles';\n\n\nexport const EmptyHeader: React.FC<{}> = () => {\n  const history = useHistory();\n  const classes = useStyles();\n\n  const handleCloseClick = useCallback(() => {\n    history.push(Routes.PROJECTS);\n  }, [history]);\n\n  return (\n    <div className={classes.wrapper}>\n      <div className={classes.rightContainer}>\n        <CloseButton\n          onClick={handleCloseClick}\n        />\n      </div>\n    </div>\n  );\n};\n","import { useSelector } from 'react-redux';\n\nimport { TProjectData } from 'types/data';\n\nimport { selectProject } from './selectors';\n\n\ntype TData = {\n  data: TProjectData | undefined;\n}\n\nexport const useState = (projectId: string): TData => {\n  const data = useSelector(selectProject(projectId));\n\n  return {\n    data,\n  };\n};\n","import { AppStyles, AppInnerStyles } from 'types/style';\nimport { useTStyles } from 'hooks';\nimport { TContentSize } from 'types/sizes';\n\n\ntype TStyleProps = {\n  size: TContentSize;\n}\n\nconst getWrapperStyles = (size: TContentSize): AppInnerStyles => {\n  if (size === 'compact') {\n    return ({\n      height: '80px',\n      maxHeight: '80px',\n    });\n  }\n  return ({\n    height: '230px',\n    maxHeight: '230px',\n  });\n};\n\nconst getPhotoStyles = (size: TContentSize): AppInnerStyles => {\n  if (size === 'compact') {\n    return ({\n      height: '60px',\n      width: '60px',\n      minHeight: '60px',\n      minWidth: '60px',\n    });\n  }\n  return ({\n    height: '160px',\n    width: '160px',\n    minHeight: '160px',\n    minWidth: '160px',\n  });\n};\n\nconst getRightContainerStyles = (size: TContentSize): AppInnerStyles => {\n  if (size === 'compact') {\n    return ({\n      alignItems: 'center',\n      paddingTop: '0px',\n    });\n  }\n  return ({\n    alignItems: 'flex-start',\n    paddingTop: '40px',\n  });\n};\n\nconst getSubtitleStyles = (size: TContentSize): AppInnerStyles => {\n  if (size === 'compact') {\n    return ({\n      opacity: '0',\n      height: '0px',\n      marginTop: '0px',\n    });\n  }\n  return ({\n    opacity: '1',\n    height: 'auto',\n    marginTop: '20px',\n  });\n};\n\n\nconst styles: AppStyles = ({\n  colors: {\n    primary: {\n      greyUltralight,\n    },\n  },\n  sizes: {\n    content: { maxWidth: contentMaxWidth, offsetHorizontal },\n    menu: { width: sidebarWidth },\n  },\n}) => {\n  return {\n    wrapper: ({ size }: TStyleProps) => ({\n      display: 'flex',\n      boxSizing: 'border-box',\n      paddingLeft: offsetHorizontal,\n      paddingRight: offsetHorizontal,\n      ...getWrapperStyles(size),\n      transition: 'all 0.4s ease',\n    }),\n    container: {\n      display: 'flex',\n      flex: 1,\n      flexDirection: 'row',\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n    innerContainer: {\n      display: 'flex',\n      flex: 1,\n      width: '100%',\n      maxWidth: contentMaxWidth,\n      flexDirection: 'row',\n      justifyContent: 'flex-start',\n      alignItems: 'center',\n      boxSizing: 'border-box',\n    },\n    midContainer: {\n      display: 'flex',\n      flex: 1,\n      flexDirection: 'column',\n      alignItems: 'flex-start',\n      justifyContent: 'center',\n      marginLeft: 50,\n    },\n    titleContainer: {\n      display: 'flex',\n      flex: 1,\n      flexDirection: 'row',\n      justifyContent: 'flex-start',\n      alignItems: 'center',\n    },\n    title: {\n      fontSize: 34,\n      fontWeight: 300,\n      lineHeight: '42px',\n      color: greyUltralight,\n      fontFamily: 'Quicksand, sans-serif',\n      marginRight: 30,\n    },\n    subTitle: ({ size }: TStyleProps) => ({\n      fontSize: 18,\n      fontWeight: 300,\n      lineHeight: '22px',\n      color: greyUltralight,\n      fontFamily: 'Quicksand, sans-serif',\n      ...getSubtitleStyles(size),\n      transition: 'all 0.2s ease',\n    }),\n    photo: ({ size }: TStyleProps) => ({\n      ...getPhotoStyles(size),\n      transition: 'all 0.4s ease',\n    }),\n    iconsContainer: {\n      display: 'flex',\n      flexDirection: 'row',\n      alignItems: 'center',\n      justifyContent: 'flex-start',\n      marginLeft: 60,\n    },\n    rightContainer: ({ size }: TStyleProps) => ({\n      height: '100%',\n      display: 'flex',\n      width: sidebarWidth,\n      flexDirection: 'row',\n      justifyContent: 'flex-end',\n      boxSizing: 'border-box',\n      ...getRightContainerStyles(size),\n      transition: 'all 0.4s ease',\n    }),\n  };\n};\n\nexport const useStyles = (props: TStyleProps): AppInnerStyles => useTStyles(styles, props);\n","import { AppStyles, AppInnerStyles } from 'types/style';\nimport { useTStyles } from 'hooks';\n\n\nconst styles: AppStyles = ({\n  sizes: {\n    content: { offsetHorizontal },\n  },\n}) => {\n  return {\n    wrapper: {\n      display: 'flex',\n      boxSizing: 'border-box',\n      paddingLeft: offsetHorizontal,\n      paddingRight: offsetHorizontal,\n    },\n    rightContainer: {\n      display: 'flex',\n      flex: 1,\n      flexDirection: 'row',\n      justifyContent: 'flex-end',\n      boxSizing: 'border-box',\n      paddingTop: 40,\n    },\n  };\n};\n\nexport const useStyles = (): AppInnerStyles => useTStyles(styles);\n"],"sourceRoot":""}