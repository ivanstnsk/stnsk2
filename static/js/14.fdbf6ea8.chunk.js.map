{"version":3,"sources":["screens/Projects/laptop/components/ProjectCard/ProjectCard.tsx","screens/Projects/laptop/components/ProjectCard/styles.ts","screens/Projects/laptop/components/ProjectCard/index.ts","screens/Projects/laptop/components/index.ts"],"names":["ProjectCard","id","onClick","classes","useStyles","handleClick","useCallback","className","button","imageContainer","type","color","width","height","text","labelsContainer","label","size","svg","viewBox","fill","xmlns","strokeDasharray","x","y","rx","stroke","strokeWidth","styles","colors","primary","from","strokeDashoffset","to","position","backgroundColor","bgContent","display","flexDirection","justifyContent","alignItems","border","borderRadius","boxSizing","boxShadow","outline","cursor","textDecoration","margin","padding","transition","transform","flex","borderTopRightRadius","borderTopLeftRadius","fontSize","fontWeight","lineHeight","greyUltralight","fontFamily","right","top","left","bottom","opacity","animation","useTStyles"],"mappings":"0GAAA,uFAYaA,EAA0C,SAAC,GAGjD,IAFLC,EAEI,EAFJA,GACAC,EACI,EADJA,QAEMC,EAAUC,sBAEVC,EAAcC,uBAAY,WAC1BJ,GACFA,EAAQD,KAET,CAACC,EAASD,IAEb,OACE,4BACEM,UAAWJ,EAAQK,OACnBN,QAASG,GAET,yBAAKE,UAAWJ,EAAQM,gBACtB,kBAAC,IAAD,CACEC,KAAK,gBACLC,MAAM,wBACNC,MAAO,GACPC,OAAQ,MAGZ,yBAAKN,UAAWJ,EAAQW,MAAxB,qBAGA,yBAAKP,UAAWJ,EAAQY,iBACtB,kBAAC,IAAD,CACEL,KAAK,SACLM,MAAM,SACNC,KAAK,WAGT,yBACEV,UAAWJ,EAAQe,IACnBN,MAAO,IACPC,OAAQ,IACRM,QAAO,cAAS,IAAT,IAAgB,KACvBC,KAAK,OACLC,MAAM,6BACNC,gBAAgB,KAEhB,0BAAMC,EAAE,IAAIC,EAAE,IAAIZ,MAAO,IAASC,OAAQ,IAASY,GAAG,KAAKC,OAAO,UAAUC,YAAY,U,iCCvDhG,4DAGMC,EAAoB,SAAC,GAMpB,IAAD,IALJC,OACEC,QAKF,MAAO,CACL,kBAAmB,CACjBC,KAAM,CAAEC,iBAAkB,GAC1BC,GAAI,CAAED,iBAAkB,KAE1BxB,OAAQ,CACN0B,SAAU,WACVC,gBARA,EAHAC,UAYAC,QAAS,OACTC,cAAe,SACfC,eAAgB,aAChBC,WAAY,UACZ5B,MAAO,IACPC,OAAQ,IACR4B,OAAQ,OACRC,aAAc,GACdC,UAAW,aACXC,UAAW,mCACXC,QAAS,OACTC,OAAQ,UACRC,eAAgB,OAChBC,OAAQ,GACRC,QAAS,EACTC,WAAY,sBAEZ,UAAW,CACTC,UAAW,4BACXD,WAAY,uBAEd,oBAAqB,CACnBxB,OAAQ,SAGZjB,eAAgB,CACd4B,QAAS,OACTe,KAAM,EACNb,eAAgB,SAChBC,WAAY,SACZL,gBAAiB,yBACjBkB,qBAAsB,GACtBC,oBAAqB,IAGvBxC,KAAM,CACJF,MAAO,OACPC,OAAQ,GACRwB,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,WAAY,SACZe,SAAU,GACVC,WAAY,IACZC,WAAY,OACZ9C,MAtDA,EAHW+C,eA0DXC,WAAY,yBAEd5C,gBAAiB,CACfmB,SAAU,WACV0B,MAAO,EACPC,IAAK,EACLxB,QAAS,OACTC,cAAe,MACfC,eAAgB,WAChBC,WAAY,cAEdtB,IAAK,CACHgB,SAAU,WACV4B,KAAM,EACNF,MAAO,EACPC,IAAK,EACLE,OAAQ,EACRC,QAAS,EAET,UAAW,CACT1C,gBAAiB,EACjB2C,UAAW,2BACXD,QAAS,MAMJ5D,EAAY,kBAAsB8D,YAAWtC,K,gCC7F1D,6E,gCCAA","file":"static/js/14.fdbf6ea8.chunk.js","sourcesContent":["import React, { useCallback } from 'react';\n\nimport { CategoryLabel, SvgProjectIcon } from 'components';\n\nimport { useStyles } from './styles';\n\n\ninterface ProjectCardProps {\n  id: string;\n  onClick: (projectId: string) => void;\n}\n\nexport const ProjectCard: React.FC<ProjectCardProps> = ({\n  id,\n  onClick,\n}) => {\n  const classes = useStyles();\n\n  const handleClick = useCallback(() => {\n    if (onClick) {\n      onClick(id);\n    }\n  }, [onClick, id]);\n\n  return (\n    <button\n      className={classes.button}\n      onClick={handleClick}\n    >\n      <div className={classes.imageContainer}>\n        <SvgProjectIcon\n          type=\"virtual-tours\"\n          color=\"rgba(255,255,255,0.5)\"\n          width={80}\n          height={80}\n        />\n      </div>\n      <div className={classes.text}>\n        Virtual Tours App\n      </div>\n      <div className={classes.labelsContainer}>\n        <CategoryLabel\n          type=\"mobile\"\n          label=\"Mobile\"\n          size=\"small\"\n        />\n      </div>\n      <svg\n        className={classes.svg}\n        width={266}\n        height={268}\n        viewBox={`0 0 ${266} ${268}`}\n        fill=\"none\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        strokeDasharray=\"0\"\n      >\n        <rect x=\"2\" y=\"2\" width={266 - 4} height={268 - 4} rx=\"10\" stroke=\"#81AF65\" strokeWidth=\"2\" />\n      </svg>\n    </button>\n  );\n};\n","import { AppStyles, AppInnerStyles } from 'types/style';\nimport { useTStyles } from 'hooks';\n\n\nconst styles: AppStyles = ({\n  colors: {\n    primary: {\n      bgContent, greyUltralight,\n    },\n  },\n}) => {\n  return {\n    '@keyframes dash': {\n      from: { strokeDashoffset: 0 },\n      to: { strokeDashoffset: 28 },\n    },\n    button: {\n      position: 'relative',\n      backgroundColor: bgContent,\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'flex-start',\n      alignItems: 'stretch',\n      width: 266,\n      height: 268,\n      border: 'none',\n      borderRadius: 10,\n      boxSizing: 'border-box',\n      boxShadow: '0px 0px 15px rgba(0, 0, 0, 0.25)',\n      outline: 'none',\n      cursor: 'pointer',\n      textDecoration: 'none',\n      margin: 15,\n      padding: 0,\n      transition: 'transform 0.4s ease',\n\n      '&:hover': {\n        transform: 'scaleX(1.05) scaleY(1.05)',\n        transition: 'transform 0.4s ease',\n      },\n      '&:active svg path': {\n        stroke: 'blue',\n      },\n    },\n    imageContainer: {\n      display: 'flex',\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center',\n      backgroundColor: 'rgba(255,255,255,0.05)',\n      borderTopRightRadius: 10,\n      borderTopLeftRadius: 10,\n\n    },\n    text: {\n      width: '100%',\n      height: 70,\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      alignItems: 'center',\n      fontSize: 18,\n      fontWeight: 300,\n      lineHeight: '22px',\n      color: greyUltralight,\n      fontFamily: 'Quicksand, sans-serif',\n    },\n    labelsContainer: {\n      position: 'absolute',\n      right: 6,\n      top: 6,\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'flex-end',\n      alignItems: 'flex-start',\n    },\n    svg: {\n      position: 'absolute',\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0,\n      opacity: 0,\n\n      '&:hover': {\n        strokeDasharray: 7,\n        animation: '$dash 1s linear infinite',\n        opacity: 1,\n      },\n    },\n  };\n};\n\nexport const useStyles = (): AppInnerStyles => useTStyles(styles);\n","export { ProjectCard } from './ProjectCard';\n","export { ProjectCard } from './ProjectCard';\n"],"sourceRoot":""}