{"version":3,"sources":["screens/Home/laptop/components/CircleButtonsLayout/CircleButtonsLayout.tsx","screens/Home/laptop/components/CircleButtonsLayout/styles.ts","screens/Home/laptop/styles.ts","screens/Home/laptop/Home.tsx","assets/icons/cv-icon.svg","assets/icons/projects-icon.svg","assets/icons/skills-icon.svg","assets/icons/contacts-icon.svg","screens/Home/laptop/components/MainCircleButton/index.ts","screens/Home/laptop/components/CircleButtonsLayout/index.ts","screens/Home/laptop/components/index.ts","screens/Home/laptop/index.ts","screens/Home/laptop/components/MainCircleButton/MainCircleButton.tsx","screens/Home/laptop/components/MainCircleButton/styles.ts"],"names":["ANCHORS","LAPTOP_MAIN_CIRCLE_BUTTON_SIZE","setButtonStyles","buttonRef","anchor","showMode","semiW","window","innerWidth","semiH","innerHeight","current","SequenceAnimation","delay","style","apply","CircleButtonsLayout","onButtonClick","classes","useStyles","projectsRef","useRef","cvRef","aboutRef","settingsRef","useEffect","className","container","type","label","innerRef","onClick","styles","position","left","right","top","bottom","width","height","display","flex","justifyContent","alignItems","background","boxSizing","useTStyles","primary","colors","backgroundColor","bg","Home","onNavigateAbout","useState","setShowMode","handleNavigate","useCallback","setTimeout","id","module","exports","MainCircleButton","memo","handleClick","button","ref","svg","viewBox","fill","xmlns","strokeDasharray","cx","cy","r","stroke","strokeWidth","icon","getIconStyles","iconRes","cvIconRes","projectsIconRes","skillsIconRes","contactsIconRes","getIcon","backgroundImage","backgroundRepeat","backgroundSize","backgroundPosition","greyUltralight","mainCircleButtonSize","sizes","buttons","from","strokeDashoffset","to","border","borderRadius","color","filter","outline","cursor","transition","opacity","transform","animation","fontSize","props"],"mappings":"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","file":"static/js/1.cdb1e5a6.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react';\n\nimport { SequenceAnimation } from 'utils';\n\nimport { MainCircleButton } from '../MainCircleButton';\n\nimport { useStyles } from './styles';\n\n\ntype TCircleButtonsLayoutProps = {\n  showMode?: boolean;\n  onButtonClick?: (buttonId: string) => void;\n};\n\nconst LAPTOP_MAIN_CIRCLE_BUTTON_SIZE = 134;\n\nconst ANCHORS = [\n  [420, -LAPTOP_MAIN_CIRCLE_BUTTON_SIZE / 2],\n  [-420 - LAPTOP_MAIN_CIRCLE_BUTTON_SIZE, -LAPTOP_MAIN_CIRCLE_BUTTON_SIZE / 2],\n  [378, LAPTOP_MAIN_CIRCLE_BUTTON_SIZE / 2 + 73],\n  [-378 - LAPTOP_MAIN_CIRCLE_BUTTON_SIZE, LAPTOP_MAIN_CIRCLE_BUTTON_SIZE / 2 + 73],\n];\n\nconst setButtonStyles = (\n  buttonRef: React.RefObject<HTMLButtonElement>,\n  anchor: number,\n  showMode: boolean,\n): void => {\n  const semiW = window.innerWidth / 2;\n  const semiH = window.innerHeight / 2;\n\n  if (showMode) {\n    if (buttonRef.current) {\n      new SequenceAnimation<HTMLButtonElement>(buttonRef)\n        .delay(1000)\n        .style('display', 'visible')\n        .style('left', `${semiW + ANCHORS[anchor][0]}px`)\n        .style('top', `${semiH + ANCHORS[anchor][1]}px`)\n        .style('opacity', '1')\n        .style('transition', 'all 0.6s ease')\n        .apply();\n    }\n  } else {\n    // eslint-disable-next-line no-lonely-if\n    if (buttonRef.current) {\n      new SequenceAnimation<HTMLButtonElement>(buttonRef)\n        .style('left', `${semiW - LAPTOP_MAIN_CIRCLE_BUTTON_SIZE / 2}px`)\n        .style('top', `${semiH - LAPTOP_MAIN_CIRCLE_BUTTON_SIZE / 2}px`)\n        .style('opacity', '0')\n        .style('transition', 'all 0.6s ease')\n        .apply();\n    }\n  }\n};\n\nexport const CircleButtonsLayout: React.FC<TCircleButtonsLayoutProps> = ({\n  showMode = false,\n  onButtonClick,\n}) => {\n  const classes = useStyles();\n  const projectsRef = useRef<HTMLButtonElement>(null);\n  const cvRef = useRef<HTMLButtonElement>(null);\n  const aboutRef = useRef<HTMLButtonElement>(null);\n  const settingsRef = useRef<HTMLButtonElement>(null);\n\n  useEffect(() => {\n    setButtonStyles(projectsRef, 0, showMode);\n    setButtonStyles(cvRef, 1, showMode);\n    setButtonStyles(settingsRef, 2, showMode);\n    setButtonStyles(aboutRef, 3, showMode);\n  }, [showMode]);\n\n  return (\n    <div className={classes.container}>\n      <MainCircleButton\n        type=\"projects\"\n        label=\"Projects\"\n        innerRef={projectsRef}\n        onClick={onButtonClick}\n      />\n      <MainCircleButton\n        type=\"cv\"\n        label=\"Curriculum vitae\"\n        innerRef={cvRef}\n        onClick={onButtonClick}\n      />\n      <MainCircleButton\n        type=\"skills\"\n        label=\"My skills\"\n        innerRef={settingsRef}\n        onClick={onButtonClick}\n      />\n      <MainCircleButton\n        type=\"contacts\"\n        label=\"Contacts\"\n        innerRef={aboutRef}\n        onClick={onButtonClick}\n      />\n    </div>\n  );\n};\n","import { AppStyles, AppInnerStyles } from 'types/style';\nimport { useTStyles } from 'hooks';\n\n\nconst styles: AppStyles = () => {\n  return {\n    container: {\n      position: 'absolute',\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0,\n      width: '100%',\n      height: '100%',\n      display: 'flex',\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center',\n      background: 'transparent',\n      boxSizing: 'border-box',\n    },\n  };\n};\n\nexport const useStyles = (): AppInnerStyles => useTStyles(styles);\n","import { AppStyles, AppInnerStyles } from 'types/style';\nimport { useTStyles } from 'hooks';\n\n\nconst styles: AppStyles = ({ colors: { primary } }) => {\n  return {\n    container: () => {\n      return {\n        backgroundColor: primary.bg,\n        display: 'flex',\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center',\n      };\n    },\n  };\n};\n\nexport const useStyles = (): AppInnerStyles => useTStyles(styles);\n","import React, { useState, useCallback } from 'react';\n\nimport { IntroCircle, GradientBackground, Footer } from 'components';\n\nimport { CircleButtonsLayout } from './components';\nimport { useStyles } from './styles';\n\n\ninterface HomeProps {\n  onNavigateAbout: () => void;\n}\n\nexport const Home: React.FC<HomeProps> = ({\n  onNavigateAbout,\n}) => {\n  const classes = useStyles();\n  const [showMode, setShowMode] = useState(true);\n\n  const handleNavigate = useCallback(() => {\n    setShowMode(false);\n    setTimeout(() => {\n      onNavigateAbout();\n    }, 1200);\n  }, [setShowMode, onNavigateAbout]);\n\n  return (\n    <div className={classes.container}>\n      <GradientBackground id=\"laptop-gradient-bg\">\n        <CircleButtonsLayout\n          showMode={showMode}\n          onButtonClick={handleNavigate}\n        />\n        <IntroCircle\n          id=\"main-circle\"\n          showMode={showMode}\n        />\n      </GradientBackground>\n      <Footer />\n    </div>\n  );\n};\n","module.exports = __webpack_public_path__ + \"static/media/cv-icon.4216a356.svg\";","module.exports = __webpack_public_path__ + \"static/media/projects-icon.d9de3a0b.svg\";","module.exports = __webpack_public_path__ + \"static/media/skills-icon.1116bb0d.svg\";","module.exports = __webpack_public_path__ + \"static/media/contacts-icon.868e8806.svg\";","export { MainCircleButton } from './MainCircleButton';\n","export { CircleButtonsLayout } from './CircleButtonsLayout';\n","export { MainCircleButton } from './MainCircleButton';\nexport { CircleButtonsLayout } from './CircleButtonsLayout';\n","export { Home as default } from './Home';\n","import React, { memo, useCallback } from 'react';\n\nimport { useStyles } from './styles';\nimport { TButtonType } from './types';\n\n\ntype TMainCircleButton = {\n  innerRef?: React.RefObject<HTMLButtonElement>;\n  type: TButtonType;\n  label: string;\n  onClick?: (id: string) => void;\n};\n\nconst LAPTOP_MAIN_CIRCLE_BUTTON_SIZE = 134;\n\nconst MainCircleButtonComp: React.FC<TMainCircleButton> = ({\n  innerRef,\n  type,\n  label,\n  onClick,\n}) => {\n  const classes = useStyles({ type });\n\n  const handleClick = useCallback(() => {\n    if (onClick) {\n      onClick(type);\n    }\n  }, [onClick, type]);\n\n  return (\n    <button\n      className={classes.button}\n      onClick={handleClick}\n      ref={innerRef}\n    >\n      <svg\n        className={classes.svg}\n        width={LAPTOP_MAIN_CIRCLE_BUTTON_SIZE}\n        height={LAPTOP_MAIN_CIRCLE_BUTTON_SIZE}\n        viewBox={`0 0 ${LAPTOP_MAIN_CIRCLE_BUTTON_SIZE} ${LAPTOP_MAIN_CIRCLE_BUTTON_SIZE}`}\n        fill=\"none\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        strokeDasharray=\"0\"\n      >\n        <circle\n          cx={LAPTOP_MAIN_CIRCLE_BUTTON_SIZE / 2}\n          cy={LAPTOP_MAIN_CIRCLE_BUTTON_SIZE / 2}\n          r={LAPTOP_MAIN_CIRCLE_BUTTON_SIZE / 2 - 2}\n          stroke=\"#81AF65\"\n          strokeWidth=\"0\"\n        />\n      </svg>\n      <div className={classes.icon} />\n      <div className={classes.label}>\n        {label}\n      </div>\n    </button>\n  );\n};\n\nexport const MainCircleButton = memo(MainCircleButtonComp);\n","import { AppStyles, AppInnerStyles } from 'types/style';\nimport { useTStyles } from 'hooks';\n\n// eslint-disable-next-line\n// @ts-ignore\nimport cvIconRes from 'assets/icons/cv-icon.svg';\n// eslint-disable-next-line\n// @ts-ignore\nimport projectsIconRes from 'assets/icons/projects-icon.svg';\n// eslint-disable-next-line\n// @ts-ignore\nimport skillsIconRes from 'assets/icons/skills-icon.svg';\n// eslint-disable-next-line\n// @ts-ignore\nimport contactsIconRes from 'assets/icons/contacts-icon.svg';\n\nimport { TButtonType } from './types';\n\n\ntype MainCircleButtonStylesProps = {\n  type: TButtonType;\n};\n\nconst getIcon = (type: TButtonType): string => {\n  switch (type) {\n    case 'cv':\n      return cvIconRes;\n    case 'projects':\n      return projectsIconRes;\n    case 'skills':\n      return skillsIconRes;\n    case 'contacts':\n      return contactsIconRes;\n    default:\n      return cvIconRes;\n  }\n};\n\nconst getIconStyles = () => ({ type }: MainCircleButtonStylesProps): AppInnerStyles => {\n  const iconRes = getIcon(type);\n\n  return {\n    width: '54px',\n    height: '54px',\n    display: 'block',\n    backgroundImage: `url(${iconRes})`,\n    backgroundRepeat: 'no-repeat',\n    backgroundSize: 'contain',\n    backgroundPosition: 'center',\n  };\n};\n\nconst styles: AppStyles = ({\n  colors: {\n    primary: { bg, greyUltralight },\n  },\n  sizes: {\n    buttons: { mainCircleButtonSize },\n  },\n}) => {\n  return {\n    '@keyframes dash': {\n      from: { strokeDashoffset: 0 },\n      to: { strokeDashoffset: 24 },\n    },\n    button: {\n      position: 'absolute',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      width: mainCircleButtonSize,\n      height: mainCircleButtonSize,\n      border: 'none',\n      borderRadius: '50%',\n      backgroundColor: bg,\n      color: greyUltralight,\n      filter: 'drop-shadow(0px 0px 25px rgba(0, 0, 0, 0.3))',\n      outline: 'none',\n      cursor: 'pointer',\n      transition: 'transform 0.3s ease',\n      opacity: 0,\n\n      '&:hover': {\n        transform: 'scaleX(1.1) scaleY(1.1)',\n        transition: 'transform 0.3s ease',\n      },\n      '&:hover $label': {\n        opacity: 1,\n        transition: 'opacity 0.3s ease',\n      },\n      '&:hover $svg': {\n        '& circle': {\n          strokeWidth: 2.5,\n        },\n        animation: '$dash 2s linear infinite',\n      },\n    },\n    svg: {\n      boxSizing: 'border-box',\n      position: 'absolute',\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0,\n      strokeDasharray: 4,\n    },\n    icon: getIconStyles(),\n    label: {\n      position: 'absolute',\n      left: 0,\n      bottom: -30,\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      width: mainCircleButtonSize,\n      height: 'auto',\n      color: greyUltralight,\n      fontSize: 18,\n      opacity: 0,\n      transition: 'opacity 0.3s ease',\n    },\n  };\n};\n\nexport const useStyles = (props: MainCircleButtonStylesProps): AppInnerStyles => {\n  return useTStyles(styles, props);\n};\n"],"sourceRoot":""}