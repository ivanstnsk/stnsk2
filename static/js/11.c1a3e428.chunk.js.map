{"version":3,"sources":["screens/Contacts/laptop/components/ContactButton/styles.ts","screens/Contacts/laptop/components/SocialButton/styles.ts","screens/Contacts/laptop/components/ContactButton/index.ts","screens/Contacts/laptop/components/SocialButton/index.ts","screens/Contacts/laptop/components/index.ts","screens/Contacts/laptop/components/ContactButton/ContactButton.tsx","screens/Contacts/laptop/components/SocialButton/SocialButton.tsx"],"names":["styles","colors","title","typography","button","backgroundColor","display","flexDirection","justifyContent","alignItems","border","outline","cursor","transition","marginBottom","transform","color","primary","greenMedium","text","fontSize","fontWeight","lineHeight","marginLeft","useStyles","useTStyles","container","marginTop","icon","hovered","props","ContactButton","type","onClick","useState","active","setActive","classes","iconColor","getActiveHandler","useCallback","nextActive","className","onMouseEnter","onMouseLeave","width","height","SocialButton","useMouseHover","containerRef","ref"],"mappings":"mHACA,4DAGMA,EAAoB,SAAC,GAKpB,IAAD,IAJJC,OACgBC,EAGZ,EAHFC,WAAcD,MAIhB,MAAO,CACLE,OAAQ,CACNC,gBAAiB,cACjBC,QAAS,OACTC,cAAe,MACfC,eAAgB,aAChBC,WAAY,SACZC,OAAQ,OACRC,QAAS,OACTC,OAAQ,UACRC,WAAY,gBACZC,aAAc,GAEd,UAAW,CACTC,UAAW,4BACXF,WAAY,iBAEd,gBAAiB,CACfG,MAnBF,EAFFC,QAAWC,cAwBXC,KAAM,CACJC,SAAU,GACVC,WAAY,SACZC,WAAY,OACZN,MAAOd,EACPqB,WAAY,MAKLC,EAAY,kBAAsBC,YAAWzB,K,iCCxC1D,4DAOMA,EAAoB,WACxB,MAAO,CACL0B,UAAW,CACTpB,QAAS,OACTC,cAAe,SACfC,eAAgB,aAChBC,WAAY,SACZI,WAAY,iBAEdT,OAAQ,CACNuB,UAAW,IAEbC,KAAM,kBAA+B,CACnCb,UADI,EAAGc,QAEH,0BACA,sBACJhB,WAAY,oBAKLW,EAAY,SAACM,GAAD,OAAwCL,YAAWzB,EAAQ8B,K,gCC7BpF,gF,gCCAA,8E,gCCAA,sJ,iICcaC,EAA8C,SAAC,GAIrD,IAHLC,EAGI,EAHJA,KACAb,EAEI,EAFJA,KACAc,EACI,EADJA,QACI,EACwBC,oBAAS,GADjC,mBACGC,EADH,KACWC,EADX,KAEEC,EAAUb,sBACVc,EAAYH,EACd,UACA,wBAEEI,EAAmBC,uBAAY,SAACC,GAAD,OAAyB,WAC5DL,EAAUK,MACT,CAACL,IAEJ,OACE,4BACEM,UAAWL,EAAQjC,OACnB6B,QAASA,EACTU,aAAcJ,GAAiB,GAC/BK,aAAcL,GAAiB,IAE/B,kBAAC,IAAD,CACEP,KAAMA,EACNa,MAAO,GACPC,OAAQ,GACR9B,MAAOsB,IAET,0BAAMI,UAAWL,EAAQlB,MACtBA,M,uIC7BI4B,EAA4C,SAAC,GAGnD,IAFLf,EAEI,EAFJA,KACAC,EACI,EADJA,QACI,EAC4Be,cAD5B,mBACGC,EADH,KACiBpB,EADjB,KAEEQ,EAAUb,oBAAU,CAAEK,YACtBS,EAAYT,EACd,UACA,wBAEJ,OACE,yBACEqB,IAAKD,EACLP,UAAWL,EAAQX,UACnBO,QAASA,GAET,kBAAC,IAAD,CACES,UAAWL,EAAQT,KACnBI,KAAMA,EACNa,MAAO,GACPC,OAAQ,GACR9B,MAAOsB,IAET,kBAAC,IAAD,CACEI,UAAWL,EAAQjC,OACnBe,KAAK,OACL0B,MAAO,IACPZ,QAASA","file":"static/js/11.c1a3e428.chunk.js","sourcesContent":["import { AppStyles, AppInnerStyles } from 'types/style';\nimport { useTStyles } from 'hooks';\n\n\nconst styles: AppStyles = ({\n  colors: {\n    typography: { title },\n    primary: { greenMedium },\n  },\n}) => {\n  return {\n    button: {\n      backgroundColor: 'transparent',\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'flex-start',\n      alignItems: 'center',\n      border: 'none',\n      outline: 'none',\n      cursor: 'pointer',\n      transition: 'all 0.4s ease',\n      marginBottom: 40,\n\n      '&:hover': {\n        transform: 'scaleX(1.05) scaleY(1.05)',\n        transition: 'all 0.4s ease',\n      },\n      '&:hover $text': {\n        color: greenMedium,\n      },\n    },\n    text: {\n      fontSize: 18,\n      fontWeight: 'normal',\n      lineHeight: '22px',\n      color: title,\n      marginLeft: 30,\n    },\n  };\n};\n\nexport const useStyles = (): AppInnerStyles => useTStyles(styles);\n","import { AppStyles, AppInnerStyles } from 'types/style';\nimport { useTStyles } from 'hooks';\n\n\ntype TStyleProps = {\n  hovered: boolean;\n};\n\nconst styles: AppStyles = () => {\n  return {\n    container: {\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'flex-start',\n      alignItems: 'center',\n      transition: 'all 0.4s ease',\n    },\n    button: {\n      marginTop: 30,\n    },\n    icon: ({ hovered }: TStyleProps) => ({\n      transform: hovered\n        ? 'scaleX(1.1) scaleY(1.1)'\n        : 'scaleX(1) scaleY(1)',\n      transition: 'all 0.4s ease',\n    }),\n  };\n};\n\nexport const useStyles = (props: TStyleProps): AppInnerStyles => useTStyles(styles, props);\n","export { ContactButton } from './ContactButton';\n","export { SocialButton } from './SocialButton';\n","export { ContactButton } from './ContactButton';\nexport { SocialButton } from './SocialButton';\n","import React, { useState, useCallback } from 'react';\n\nimport { SvgIcon } from 'components';\n\nimport { TContactButtonTypes } from './types';\nimport { useStyles } from './styles';\n\n\ninterface ContactButtonProps {\n  type: TContactButtonTypes;\n  text: string;\n  onClick?: () => void;\n}\n\nexport const ContactButton: React.FC<ContactButtonProps> = ({\n  type,\n  text,\n  onClick,\n}) => {\n  const [active, setActive] = useState(false);\n  const classes = useStyles();\n  const iconColor = active\n    ? '#81AF65'\n    : 'rgba(255,255,255,0.4)';\n\n  const getActiveHandler = useCallback((nextActive: boolean) => () => {\n    setActive(nextActive);\n  }, [setActive]);\n\n  return (\n    <button\n      className={classes.button}\n      onClick={onClick}\n      onMouseEnter={getActiveHandler(true)}\n      onMouseLeave={getActiveHandler(false)}\n    >\n      <SvgIcon\n        type={type}\n        width={60}\n        height={60}\n        color={iconColor}\n      />\n      <span className={classes.text}>\n        {text}\n      </span>\n    </button>\n  );\n};\n","import React from 'react';\n\nimport { SvgIcon, Button } from 'components';\nimport { useMouseHover } from 'hooks';\n\nimport { TContactButtonTypes } from './types';\nimport { useStyles } from './styles';\n\n\ninterface SocialButtonProps {\n  type: TContactButtonTypes;\n  onClick?: () => void;\n}\n\nexport const SocialButton: React.FC<SocialButtonProps> = ({\n  type,\n  onClick,\n}) => {\n  const [containerRef, hovered] = useMouseHover<HTMLDivElement>();\n  const classes = useStyles({ hovered });\n  const iconColor = hovered\n    ? '#81AF65'\n    : 'rgba(255,255,255,0.4)';\n\n  return (\n    <div\n      ref={containerRef}\n      className={classes.container}\n      onClick={onClick}\n    >\n      <SvgIcon\n        className={classes.icon}\n        type={type}\n        width={60}\n        height={60}\n        color={iconColor}\n      />\n      <Button\n        className={classes.button}\n        text=\"Open\"\n        width={110}\n        onClick={onClick}\n      />\n    </div>\n  );\n};\n"],"sourceRoot":""}