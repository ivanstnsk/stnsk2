{"version":3,"sources":["assets/icons/cv-icon.svg","assets/icons/projects-icon.svg","assets/icons/skills-icon.svg","assets/icons/contacts-icon.svg","screens/Home/laptop/components/MainCircleButton/index.ts","screens/Home/laptop/components/CircleButtonsLayout/index.ts","screens/Home/laptop/components/MainCircleButton/MainCircleButton.tsx","screens/Home/laptop/components/MainCircleButton/styles.ts","screens/Home/laptop/components/CircleButtonsLayout/CircleButtonsLayout.tsx","screens/Home/laptop/components/CircleButtonsLayout/styles.ts"],"names":["module","exports","MainCircleButton","memo","innerRef","type","label","onClick","classes","useStyles","handleClick","useCallback","className","button","ref","svg","width","height","viewBox","fill","xmlns","strokeDasharray","cx","LAPTOP_MAIN_CIRCLE_BUTTON_SIZE","cy","r","stroke","strokeWidth","icon","getIconStyles","iconRes","cvIconRes","projectsIconRes","skillsIconRes","contactsIconRes","getIcon","display","backgroundImage","backgroundRepeat","backgroundSize","backgroundPosition","styles","colors","primary","bg","greyUltralight","mainCircleButtonSize","sizes","buttons","from","strokeDashoffset","to","position","justifyContent","alignItems","border","borderRadius","backgroundColor","color","filter","outline","cursor","transition","opacity","transform","animation","boxSizing","left","right","top","bottom","fontSize","props","useTStyles","ANCHORS","setButtonStyles","buttonRef","anchor","showMode","semiW","window","innerWidth","semiH","innerHeight","current","SequenceAnimation","delay","style","apply","CircleButtonsLayout","onButtonClick","projectsRef","useRef","cvRef","aboutRef","settingsRef","useEffect","container","flex","background"],"mappings":"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","file":"static/js/7.4ef44a5a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cv-icon.4216a356.svg\";","module.exports = __webpack_public_path__ + \"static/media/projects-icon.d9de3a0b.svg\";","module.exports = __webpack_public_path__ + \"static/media/skills-icon.1116bb0d.svg\";","module.exports = __webpack_public_path__ + \"static/media/contacts-icon.868e8806.svg\";","export { MainCircleButton } from './MainCircleButton';\n","export { CircleButtonsLayout } from './CircleButtonsLayout';\n","import React, { memo, useCallback } from 'react';\n\nimport { useStyles } from './styles';\nimport { TButtonType } from './types';\n\n\ntype TMainCircleButton = {\n  innerRef?: React.RefObject<HTMLButtonElement>;\n  type: TButtonType;\n  label: string;\n  onClick?: (id: string) => void;\n};\n\nconst LAPTOP_MAIN_CIRCLE_BUTTON_SIZE = 134;\n\nconst MainCircleButtonComp: React.FC<TMainCircleButton> = ({\n  innerRef,\n  type,\n  label,\n  onClick,\n}) => {\n  const classes = useStyles({ type });\n\n  const handleClick = useCallback(() => {\n    if (onClick) {\n      onClick(type);\n    }\n  }, [onClick, type]);\n\n  return (\n    <button\n      className={classes.button}\n      onClick={handleClick}\n      ref={innerRef}\n    >\n      <svg\n        className={classes.svg}\n        width={LAPTOP_MAIN_CIRCLE_BUTTON_SIZE}\n        height={LAPTOP_MAIN_CIRCLE_BUTTON_SIZE}\n        viewBox={`0 0 ${LAPTOP_MAIN_CIRCLE_BUTTON_SIZE} ${LAPTOP_MAIN_CIRCLE_BUTTON_SIZE}`}\n        fill=\"none\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        strokeDasharray=\"0\"\n      >\n        <circle\n          cx={LAPTOP_MAIN_CIRCLE_BUTTON_SIZE / 2}\n          cy={LAPTOP_MAIN_CIRCLE_BUTTON_SIZE / 2}\n          r={LAPTOP_MAIN_CIRCLE_BUTTON_SIZE / 2 - 2}\n          stroke=\"#81AF65\"\n          strokeWidth=\"0\"\n        />\n      </svg>\n      <div className={classes.icon} />\n      <div className={classes.label}>\n        {label}\n      </div>\n    </button>\n  );\n};\n\nexport const MainCircleButton = memo(MainCircleButtonComp);\n","import { AppStyles, AppInnerStyles } from 'types/style';\nimport { useTStyles } from 'hooks';\n\n// eslint-disable-next-line\n// @ts-ignore\nimport cvIconRes from 'assets/icons/cv-icon.svg';\n// eslint-disable-next-line\n// @ts-ignore\nimport projectsIconRes from 'assets/icons/projects-icon.svg';\n// eslint-disable-next-line\n// @ts-ignore\nimport skillsIconRes from 'assets/icons/skills-icon.svg';\n// eslint-disable-next-line\n// @ts-ignore\nimport contactsIconRes from 'assets/icons/contacts-icon.svg';\n\nimport { TButtonType } from './types';\n\n\ntype MainCircleButtonStylesProps = {\n  type: TButtonType;\n};\n\nconst getIcon = (type: TButtonType): string => {\n  switch (type) {\n    case 'cv':\n      return cvIconRes;\n    case 'projects':\n      return projectsIconRes;\n    case 'skills':\n      return skillsIconRes;\n    case 'contacts':\n      return contactsIconRes;\n    default:\n      return cvIconRes;\n  }\n};\n\nconst getIconStyles = () => ({ type }: MainCircleButtonStylesProps): AppInnerStyles => {\n  const iconRes = getIcon(type);\n\n  return {\n    width: '54px',\n    height: '54px',\n    display: 'block',\n    backgroundImage: `url(${iconRes})`,\n    backgroundRepeat: 'no-repeat',\n    backgroundSize: 'contain',\n    backgroundPosition: 'center',\n  };\n};\n\nconst styles: AppStyles = ({\n  colors: {\n    primary: { bg, greyUltralight },\n  },\n  sizes: {\n    buttons: { mainCircleButtonSize },\n  },\n}) => {\n  return {\n    '@keyframes dash': {\n      from: { strokeDashoffset: 0 },\n      to: { strokeDashoffset: 24 },\n    },\n    button: {\n      position: 'absolute',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      width: mainCircleButtonSize,\n      height: mainCircleButtonSize,\n      border: 'none',\n      borderRadius: '50%',\n      backgroundColor: bg,\n      color: greyUltralight,\n      filter: 'drop-shadow(0px 0px 25px rgba(0, 0, 0, 0.3))',\n      outline: 'none',\n      cursor: 'pointer',\n      transition: 'transform 0.3s ease',\n      opacity: 0,\n\n      '&:hover': {\n        transform: 'scaleX(1.1) scaleY(1.1)',\n        transition: 'transform 0.3s ease',\n      },\n      '&:hover $label': {\n        opacity: 1,\n        transition: 'opacity 0.3s ease',\n      },\n      '&:hover $svg': {\n        '& circle': {\n          strokeWidth: 2.5,\n        },\n        animation: '$dash 2s linear infinite',\n      },\n    },\n    svg: {\n      boxSizing: 'border-box',\n      position: 'absolute',\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0,\n      strokeDasharray: 4,\n    },\n    icon: getIconStyles(),\n    label: {\n      position: 'absolute',\n      left: 0,\n      bottom: -30,\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      width: mainCircleButtonSize,\n      height: 'auto',\n      color: greyUltralight,\n      fontSize: 18,\n      opacity: 0,\n      transition: 'opacity 0.3s ease',\n    },\n  };\n};\n\nexport const useStyles = (props: MainCircleButtonStylesProps): AppInnerStyles => {\n  return useTStyles(styles, props);\n};\n","import React, { useRef, useEffect } from 'react';\n\nimport { SequenceAnimation } from 'utils';\n\nimport { MainCircleButton } from '../MainCircleButton';\n\nimport { useStyles } from './styles';\n\n\ntype TCircleButtonsLayoutProps = {\n  showMode?: boolean;\n  onButtonClick?: (buttonId: string) => void;\n};\n\nconst LAPTOP_MAIN_CIRCLE_BUTTON_SIZE = 134;\n\nconst ANCHORS = [\n  [420, -LAPTOP_MAIN_CIRCLE_BUTTON_SIZE / 2],\n  [-420 - LAPTOP_MAIN_CIRCLE_BUTTON_SIZE, -LAPTOP_MAIN_CIRCLE_BUTTON_SIZE / 2],\n  [378, LAPTOP_MAIN_CIRCLE_BUTTON_SIZE / 2 + 73],\n  [-378 - LAPTOP_MAIN_CIRCLE_BUTTON_SIZE, LAPTOP_MAIN_CIRCLE_BUTTON_SIZE / 2 + 73],\n];\n\nconst setButtonStyles = (\n  buttonRef: React.RefObject<HTMLButtonElement>,\n  anchor: number,\n  showMode: boolean,\n): void => {\n  const semiW = window.innerWidth / 2;\n  const semiH = window.innerHeight / 2;\n\n  if (showMode) {\n    if (buttonRef.current) {\n      new SequenceAnimation<HTMLButtonElement>(buttonRef)\n        .delay(1000)\n        .style('display', 'visible')\n        .style('left', `${semiW + ANCHORS[anchor][0]}px`)\n        .style('top', `${semiH + ANCHORS[anchor][1]}px`)\n        .style('opacity', '1')\n        .style('transition', 'all 0.6s ease')\n        .apply();\n    }\n  } else {\n    // eslint-disable-next-line no-lonely-if\n    if (buttonRef.current) {\n      new SequenceAnimation<HTMLButtonElement>(buttonRef)\n        .style('left', `${semiW - LAPTOP_MAIN_CIRCLE_BUTTON_SIZE / 2}px`)\n        .style('top', `${semiH - LAPTOP_MAIN_CIRCLE_BUTTON_SIZE / 2}px`)\n        .style('opacity', '0')\n        .style('transition', 'all 0.6s ease')\n        .apply();\n    }\n  }\n};\n\nexport const CircleButtonsLayout: React.FC<TCircleButtonsLayoutProps> = ({\n  showMode = false,\n  onButtonClick,\n}) => {\n  const classes = useStyles();\n  const projectsRef = useRef<HTMLButtonElement>(null);\n  const cvRef = useRef<HTMLButtonElement>(null);\n  const aboutRef = useRef<HTMLButtonElement>(null);\n  const settingsRef = useRef<HTMLButtonElement>(null);\n\n  useEffect(() => {\n    setButtonStyles(projectsRef, 0, showMode);\n    setButtonStyles(cvRef, 1, showMode);\n    setButtonStyles(settingsRef, 2, showMode);\n    setButtonStyles(aboutRef, 3, showMode);\n  }, [showMode]);\n\n  return (\n    <div className={classes.container}>\n      <MainCircleButton\n        type=\"projects\"\n        label=\"Projects\"\n        innerRef={projectsRef}\n        onClick={onButtonClick}\n      />\n      <MainCircleButton\n        type=\"cv\"\n        label=\"Curriculum vitae\"\n        innerRef={cvRef}\n        onClick={onButtonClick}\n      />\n      <MainCircleButton\n        type=\"skills\"\n        label=\"My skills\"\n        innerRef={settingsRef}\n        onClick={onButtonClick}\n      />\n      <MainCircleButton\n        type=\"contacts\"\n        label=\"Contacts\"\n        innerRef={aboutRef}\n        onClick={onButtonClick}\n      />\n    </div>\n  );\n};\n","import { AppStyles, AppInnerStyles } from 'types/style';\nimport { useTStyles } from 'hooks';\n\n\nconst styles: AppStyles = () => {\n  return {\n    container: {\n      position: 'absolute',\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0,\n      width: '100%',\n      height: '100%',\n      display: 'flex',\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center',\n      background: 'transparent',\n      boxSizing: 'border-box',\n    },\n  };\n};\n\nexport const useStyles = (): AppInnerStyles => useTStyles(styles);\n"],"sourceRoot":""}