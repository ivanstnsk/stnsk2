{"version":3,"sources":["screens/Contacts/laptop/components/ContactButton/ContactButton.tsx","screens/Contacts/laptop/components/ContactButton/styles.ts"],"names":["ContactButton","type","text","onClick","useState","active","setActive","classes","useStyles","iconColor","getActiveHandler","useCallback","nextActive","className","button","onMouseEnter","onMouseLeave","width","height","color","styles","colors","title","typography","backgroundColor","display","flexDirection","justifyContent","alignItems","border","outline","cursor","transition","marginBottom","transform","primary","greenMedium","fontSize","fontWeight","lineHeight","marginLeft","useTStyles"],"mappings":"qMAcaA,EAA8C,SAAC,GAIrD,IAHLC,EAGI,EAHJA,KACAC,EAEI,EAFJA,KACAC,EACI,EADJA,QACI,EACwBC,oBAAS,GADjC,mBACGC,EADH,KACWC,EADX,KAEEC,EAAUC,sBACVC,EAAYJ,EACd,UACA,wBAEEK,EAAmBC,uBAAY,SAACC,GAAD,OAAyB,WAC5DN,EAAUM,MACT,CAACN,IAEJ,OACE,4BACEO,UAAWN,EAAQO,OACnBX,QAASA,EACTY,aAAcL,GAAiB,GAC/BM,aAAcN,GAAiB,IAE/B,kBAAC,IAAD,CACET,KAAMA,EACNgB,MAAO,GACPC,OAAQ,GACRC,MAAOV,IAET,0BAAMI,UAAWN,EAAQL,MACtBA,M,iCC1CT,4DAGMkB,EAAoB,SAAC,GAKpB,IAAD,IAJJC,OACgBC,EAGZ,EAHFC,WAAcD,MAIhB,MAAO,CACLR,OAAQ,CACNU,gBAAiB,cACjBC,QAAS,OACTC,cAAe,MACfC,eAAgB,aAChBC,WAAY,SACZC,OAAQ,OACRC,QAAS,OACTC,OAAQ,UACRC,WAAY,gBACZC,aAAc,GAEd,UAAW,CACTC,UAAW,4BACXF,WAAY,iBAEd,gBAAiB,CACfb,MAnBF,EAFFgB,QAAWC,cAwBXlC,KAAM,CACJmC,SAAU,GACVC,WAAY,SACZC,WAAY,OACZpB,MAAOG,EACPkB,WAAY,MAKLhC,EAAY,kBAAsBiC,YAAWrB","file":"static/js/53.b4073485.chunk.js","sourcesContent":["import React, { useState, useCallback } from 'react';\n\nimport { SvgIcon } from 'components';\n\nimport { TContactButtonTypes } from './types';\nimport { useStyles } from './styles';\n\n\ninterface ContactButtonProps {\n  type: TContactButtonTypes;\n  text: string;\n  onClick?: () => void;\n}\n\nexport const ContactButton: React.FC<ContactButtonProps> = ({\n  type,\n  text,\n  onClick,\n}) => {\n  const [active, setActive] = useState(false);\n  const classes = useStyles();\n  const iconColor = active\n    ? '#81AF65'\n    : 'rgba(255,255,255,0.4)';\n\n  const getActiveHandler = useCallback((nextActive: boolean) => () => {\n    setActive(nextActive);\n  }, [setActive]);\n\n  return (\n    <button\n      className={classes.button}\n      onClick={onClick}\n      onMouseEnter={getActiveHandler(true)}\n      onMouseLeave={getActiveHandler(false)}\n    >\n      <SvgIcon\n        type={type}\n        width={60}\n        height={60}\n        color={iconColor}\n      />\n      <span className={classes.text}>\n        {text}\n      </span>\n    </button>\n  );\n};\n","import { AppStyles, AppInnerStyles } from 'types/style';\nimport { useTStyles } from 'hooks';\n\n\nconst styles: AppStyles = ({\n  colors: {\n    typography: { title },\n    primary: { greenMedium },\n  },\n}) => {\n  return {\n    button: {\n      backgroundColor: 'transparent',\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'flex-start',\n      alignItems: 'center',\n      border: 'none',\n      outline: 'none',\n      cursor: 'pointer',\n      transition: 'all 0.4s ease',\n      marginBottom: 40,\n\n      '&:hover': {\n        transform: 'scaleX(1.05) scaleY(1.05)',\n        transition: 'all 0.4s ease',\n      },\n      '&:hover $text': {\n        color: greenMedium,\n      },\n    },\n    text: {\n      fontSize: 18,\n      fontWeight: 'normal',\n      lineHeight: '22px',\n      color: title,\n      marginLeft: 30,\n    },\n  };\n};\n\nexport const useStyles = (): AppInnerStyles => useTStyles(styles);\n"],"sourceRoot":""}